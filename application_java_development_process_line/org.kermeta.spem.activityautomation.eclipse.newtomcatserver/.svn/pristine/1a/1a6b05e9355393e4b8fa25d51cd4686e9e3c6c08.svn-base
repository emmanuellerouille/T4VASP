package org.kermeta.spem.activityautomation.eclipse.newtomcatserver.actions;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;
import org.eclipse.wst.server.core.IRuntimeType;
import org.eclipse.wst.server.core.IRuntimeWorkingCopy;
import org.eclipse.wst.server.core.ServerCore;
import org.eclipse.jface.dialogs.MessageDialog;

/**
 * Our sample action implements workbench action delegate.
 * The action proxy will be created by the workbench and
 * shown in the UI. When the user tries to use the action,
 * this delegate will be created and execution will be 
 * delegated to it.
 * @see IWorkbenchWindowActionDelegate
 */
public class SampleAction implements IWorkbenchWindowActionDelegate {
	private IWorkbenchWindow window;
	/**
	 * The constructor.
	 */
	public SampleAction() {
	}

	/**
	 * The action has been activated. The argument of the
	 * method represents the 'real' action sitting
	 * in the workbench UI.
	 * @see IWorkbenchWindowActionDelegate#run
	 */
	public void run(IAction action) {
		MessageDialog.openInformation(
			window.getShell(),
			"Newtomcatserver",
			"Hello, Eclipse world");
		
		IRuntimeType[] runtimeTypes = ServerCore.getRuntimeTypes();
		for(IRuntimeType runtimeType : runtimeTypes){
			System.out.println("runtimeType.getDescription() = "+runtimeType.getDescription());
			System.out.println("runtimeType.getId() = "+runtimeType.getId());
			System.out.println("runtimeType.getName() = "+runtimeType.getName());
			if(runtimeType.getName().equals("Apache Tomcat v7.0")){
				System.out.println("J'ai trouvé le bon serveur!");
				try {
					IRuntimeWorkingCopy runtimeWorkingCopy = runtimeType.createRuntime(null, new NullProgressMonitor());
					runtimeWorkingCopy.setLocation(new Path("C:\\Program Files\\Apache Software Foundation\\Tomcat 7.0"));
					IStatus status = runtimeWorkingCopy.validate(new NullProgressMonitor());
					System.out.println("status code = "+status.getCode());
					System.out.println("status message = "+status.getMessage());
					runtimeWorkingCopy.save(false, new NullProgressMonitor());
					System.out.println("save done");
				} catch (CoreException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * Selection in the workbench has been changed. We 
	 * can change the state of the 'real' action here
	 * if we want, but this can only happen after 
	 * the delegate has been created.
	 * @see IWorkbenchWindowActionDelegate#selectionChanged
	 */
	public void selectionChanged(IAction action, ISelection selection) {
	}

	/**
	 * We can use this method to dispose of any system
	 * resources we previously allocated.
	 * @see IWorkbenchWindowActionDelegate#dispose
	 */
	public void dispose() {
	}

	/**
	 * We will cache window object in order to
	 * be able to provide parent shell for the message dialog.
	 * @see IWorkbenchWindowActionDelegate#init
	 */
	public void init(IWorkbenchWindow window) {
		this.window = window;
	}
}