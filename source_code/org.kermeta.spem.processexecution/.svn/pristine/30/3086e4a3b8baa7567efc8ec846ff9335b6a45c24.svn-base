package org.kermeta.spem.processexecution.actions;

import java.io.IOException;
import java.util.Collections;
import java.util.Map;

import org.eclipse.core.internal.resources.File;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.ui.IObjectActionDelegate;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.dialogs.ElementTreeSelectionDialog;
import org.eclipse.ui.model.BaseWorkbenchContentProvider;
import org.eclipse.ui.model.WorkbenchLabelProvider;
import org.kermeta.spem.executioncontext.ExecutionContext;
import org.kermeta.spem.executioncontext.ExecutioncontextFactory;
import org.kermeta.spem.executioncontext.ExecutioncontextPackage;
import org.kermeta.spem.executioncontext.Key;
import org.kermeta.spem.executioncontext.State;
import org.kermeta.spem.executioncontext.StateValue;
import org.kermeta.spem.executioncontext.Value;
import org.kermeta.spem.processexecution.Activator;
import org.kermeta.spem.processexecution.view.HyperlinkFigure;
import org.kermeta.spem.processexecution.view.ProcessPart;
import org.kermeta.spem.processexecution.view.actions.impl.NullAction;
import org.kermeta.spem.processexecution.view.actions.impl.StartAction;

import spem.Activity;
import spem.BreakdownElement;
import spem.MethodLibrary;
import spem.MethodPlugin;
import spem.ProcessPackage;
import spem.ProcessPackageableElement;
import spem.SpemPackage;
import spem.TaskUse;
import spem.uma.DeliveryProcess;
import spem.uma.DeliveryProcessPackage;



public class ExecuteProcess implements IObjectActionDelegate{

	private IWorkbenchPart targetPart;
	private ISelection selection;
	private File process;
	private IFile behaviorModel;

	public ExecuteProcess() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public void run(IAction action) {

		//Set the process attribute
		if (selection instanceof StructuredSelection){
			StructuredSelection structuredSelection = (StructuredSelection) selection;
			if(structuredSelection.getFirstElement() instanceof File){
				process = (File) structuredSelection.getFirstElement();
			}
		}

		//Save the process model path
		Activator.getDefault().getPreferenceStore().setValue("process model path",
				process.getFullPath().toString());

		//Ask the user to choose the behavior model
		ElementTreeSelectionDialog dialog = new ElementTreeSelectionDialog(targetPart.getSite().getShell(), new WorkbenchLabelProvider(), new BaseWorkbenchContentProvider());
		dialog.setTitle("Behavior Model Selection");
		dialog.setMessage("Select the behavior model:");
		dialog.setInput(ResourcesPlugin.getWorkspace().getRoot());
		//dialog.addFilter(new BehaviorFilter());
		dialog.open();

		//Set the behavior model attribute
		if(dialog.getResult()[0] instanceof IFile){
			behaviorModel = (IFile)dialog.getResult()[0];
		}

		//Save the behavior model path
		Activator.getDefault().getPreferenceStore().setValue("behavior model path",
				behaviorModel.getFullPath().toString());

		// Initialize the model
		SpemPackage.eINSTANCE.eClass();

		// Register the XMI resource factory for the .spem extension

		Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
		Map<String, Object> m = reg.getExtensionToFactoryMap();
		m.put("spem", new XMIResourceFactoryImpl());

		// Obtain a new resource set
		ResourceSet resSet = new ResourceSetImpl();

		// Get the resource
		Resource resource = resSet.getResource(URI
				.createURI("platform:/resource"+process.getFullPath()), true);
		System.out.println("platform:/resource+process.getFullPath() = "+"platform:/resource"+process.getFullPath());
		// Get the first model element and cast it to the right type, in my
		// example everything is hierarchical included in this first node
		MethodLibrary methodLibrary = (MethodLibrary) resource.getContents().get(0);

		MethodPlugin methodPlugin = methodLibrary.getOwnedMethodPlugin().get(0);
		ProcessPackage processPackage = methodPlugin.getOwnedProcessPackage().get(0);		
		DeliveryProcessPackage deliveryProcessPackage = null;
		for(ProcessPackageableElement e : processPackage.getOwnedProcessMember()){
			if(e instanceof DeliveryProcessPackage){
				deliveryProcessPackage = (DeliveryProcessPackage) e;
			}
		}
		DeliveryProcess deliveryProcess = (DeliveryProcess) deliveryProcessPackage.getOwnedProcessMember().get(0);

		//Create the context model
		ExecutioncontextPackage.eINSTANCE.eClass();
		Resource.Factory.Registry regContextModel = Resource.Factory.Registry.INSTANCE;
		Map<String, Object> mContextModel = regContextModel.getExtensionToFactoryMap();
		mContextModel.put("executioncontext", new XMIResourceFactoryImpl());
		ResourceSet resSetContextModel = new ResourceSetImpl();
		ExecutionContext executionContext = ExecutioncontextFactory.eINSTANCE.createExecutionContext();
		executionContext.setName("process execution execution context");
		
		int t = 0;
		for(BreakdownElement be : deliveryProcess.getNestedBreakdownElement()){
			if(be instanceof Activity){
				Activity activity = (Activity) be;
				for(BreakdownElement b : activity.getNestedBreakdownElement()){
					if(b instanceof TaskUse){
						TaskUse taskUse = (TaskUse) b;
						State state = ExecutioncontextFactory.eINSTANCE.createState();
						state.setName(taskUse.getName()+" state");
						state.setTaskUse(taskUse);
						if (t == 0){
							state.setCurrentState(StateValue.ON_START);
						} else {
							state.setCurrentState(StateValue.NOT_STARTED);
						}
						executionContext.getStates().add(state);
						t++;
					}
				}
			}
		}
		
		//Save the process model path into the context model
		Key processModelPathKey = ExecutioncontextFactory.eINSTANCE.createKey();
		processModelPathKey.setName("process model path");
		Value processModelPathValue = ExecutioncontextFactory.eINSTANCE.createValue();
		processModelPathValue.setContent(process.getFullPath().toString());
		processModelPathValue.setKey(processModelPathKey);
		processModelPathKey.setValue(processModelPathValue);
		executionContext.getKeys().add(processModelPathKey);
		executionContext.getValues().add(processModelPathValue);
		
		//Save the behavior model path into the context model
		Key behaviorModelPathKey = ExecutioncontextFactory.eINSTANCE.createKey();
		behaviorModelPathKey.setName("behavior model path");
		Value behaviorModelPathValue = ExecutioncontextFactory.eINSTANCE.createValue();
		behaviorModelPathValue.setContent(behaviorModel.getFullPath().toString());
		behaviorModelPathValue.setKey(behaviorModelPathKey);
		behaviorModelPathKey.setValue(behaviorModelPathValue);
		executionContext.getKeys().add(behaviorModelPathKey);
		executionContext.getValues().add(behaviorModelPathValue);
		
		//Save the context model
		Resource resourceContextModel = resSetContextModel.createResource(URI.createURI(process.getFullPath()+"_contextModel.executioncontext"));
		resourceContextModel.getContents().add(executionContext);
		try {
			resourceContextModel.save(Collections.EMPTY_MAP);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//Save the context model path
		Activator.getDefault().getPreferenceStore().setValue("context model path", "platform:/resource"+process.getFullPath()+"_contextModel.executioncontext");

		try {
			ProcessPart view = (ProcessPart)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("ProcessExecution.views.ProcessElementsView");
			view.getMediator().getView().getAbstractSyntaxFigure().addAction(new HyperlinkFigure("on start", new StartAction(true, "Metamodel creation", Activator.getDefault().getPreferenceStore().getString("context model path"))));
			view.getMediator().getView().getAbstractSyntaxFigure().addAction(new HyperlinkFigure("on do", new NullAction(false)));
			view.getMediator().getView().getAbstractSyntaxFigure().addAction(new HyperlinkFigure("done", new NullAction(false)));
			view.getMediator().getView().getAbstractSyntaxFigure().addAction(new HyperlinkFigure("on end", new NullAction(false)));
			
			view.getMediator().getView().getCheckerFigure().addAction(new HyperlinkFigure("on start", new NullAction(false)));
			view.getMediator().getView().getCheckerFigure().addAction(new HyperlinkFigure("on do", new NullAction(false)));
			view.getMediator().getView().getCheckerFigure().addAction(new HyperlinkFigure("done", new NullAction(false)));
			view.getMediator().getView().getCheckerFigure().addAction(new HyperlinkFigure("on end", new NullAction(false)));
			
			view.getMediator().getView().getCompilerFigure().addAction(new HyperlinkFigure("on start", new NullAction(false)));
			view.getMediator().getView().getCompilerFigure().addAction(new HyperlinkFigure("on do", new NullAction(false)));
			view.getMediator().getView().getCompilerFigure().addAction(new HyperlinkFigure("done", new NullAction(false)));
			view.getMediator().getView().getCompilerFigure().addAction(new HyperlinkFigure("on end", new NullAction(false)));
			
			view.getMediator().getView().getInterpreterFigure().addAction(new HyperlinkFigure("on start", new NullAction(false)));
			view.getMediator().getView().getInterpreterFigure().addAction(new HyperlinkFigure("on do", new NullAction(false)));
			view.getMediator().getView().getInterpreterFigure().addAction(new HyperlinkFigure("done", new NullAction(false)));
			view.getMediator().getView().getInterpreterFigure().addAction(new HyperlinkFigure("on end", new NullAction(false)));
			
			view.getMediator().getView().getStaticSemanticsFigure().addAction(new HyperlinkFigure("on start", new NullAction(false)));
			view.getMediator().getView().getStaticSemanticsFigure().addAction(new HyperlinkFigure("on do", new NullAction(false)));
			view.getMediator().getView().getStaticSemanticsFigure().addAction(new HyperlinkFigure("done", new NullAction(false)));
			view.getMediator().getView().getStaticSemanticsFigure().addAction(new HyperlinkFigure("on end", new NullAction(false)));
			
			view.getMediator().getView().getTreeConcreteSyntaxFigure().addAction(new HyperlinkFigure("on start", new NullAction(false)));
			view.getMediator().getView().getTreeConcreteSyntaxFigure().addAction(new HyperlinkFigure("on do", new NullAction(false)));
			view.getMediator().getView().getTreeConcreteSyntaxFigure().addAction(new HyperlinkFigure("done", new NullAction(false)));
			view.getMediator().getView().getTreeConcreteSyntaxFigure().addAction(new HyperlinkFigure("on end", new NullAction(false)));
			
		} catch (PartInitException e1) {
			e1.printStackTrace();
		}
	}

	@Override
	public void selectionChanged(IAction action, ISelection selection) {
		this.selection = selection;
	}

	@Override
	public void setActivePart(IAction action, IWorkbenchPart targetPart) {
		this.targetPart = targetPart;
	}
}
