package org.kermeta.spem.activityautomationmanager;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IExtension;
import org.eclipse.core.runtime.ISafeRunnable;
import org.eclipse.core.runtime.InvalidRegistryObjectException;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.SafeRunner;

public class BehaviorExecution {

	public static void behaviorExecution(String action, String contextFilePath){

		//Find the class, among those extending the activityautomationregistry extension point, whose action equals action and execute its run operation
		System.out.println("action StaticCall= "+action);
		IExtension[] extensions = Platform.getExtensionRegistry().getExtensionPoint(Activator.getDefault().PLUGIN_ID,"activityautomationregistry").getExtensions();
		for(int i = 0; i < extensions.length; i++){
			IConfigurationElement[] configElements = extensions[i].getConfigurationElements();
			for(int j = 0; j < configElements.length; j++){
				System.out.println("configElements[j].getAttribute(action) = "+configElements[j].getAttribute("action"));
				if(configElements[j].getAttribute("action").equals(action)){
					System.out.println("true");

					Object o;
					try {
						o = configElements[j].createExecutableExtension("interface");
						if (o instanceof ActivityAutomation) {
							System.out.println("o instanceof ActivityAutomation");
							((ActivityAutomation) o).run(contextFilePath);
						}
					} catch (CoreException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}

		}

	}
}
