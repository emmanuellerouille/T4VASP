package org.kermeta.spem.processexecution.view.actions.impl;

import org.eclipse.draw2d.Label;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.kermeta.spem.behavior.Container;
import org.kermeta.spem.executioncontext.ExecutionContext;
import org.kermeta.spem.executioncontext.State;
import org.kermeta.spem.processexecution.acinterpreter.ACInterpreter;
import org.kermeta.spem.processexecution.utils.model.ModelUtils;
import org.kermeta.spem.processexecution.view.HyperlinkFigure;
import org.kermeta.spem.processexecution.view.ProcessPart;
import org.kermeta.spem.processexecution.view.TaskFigure;
import org.kermeta.spem.processexecution.view.actions.ProcessAction;


public class EndAction extends ProcessAction {
	
	private String processModelPath = null;

	public EndAction(boolean enabled) {
		super(enabled);
		// TODO Auto-generated constructor stub
	}

	public EndAction(boolean enabled, String taskUseName){
		super(enabled, taskUseName);
	}

	public EndAction(boolean enabled, String taskUseName, String contextModelPath){
		super(enabled, taskUseName, contextModelPath);
	}

	@Override
	public void run() {
		
		ExecutionContext executionContext = ModelUtils.getExecutionContextRoot(contextModelPath);
		
		String behaviorModelPath = ModelUtils.getBehaviorModelPath(contextModelPath);
		processModelPath = ModelUtils.getProcessModelPath(contextModelPath);

		//Get the root of the behavior model
		Container container = ModelUtils.getBehaviorModelRoot(behaviorModelPath);
		
		//update process view
		ProcessPart view;
		try {
			view = (ProcessPart)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("ProcessExecution.views.ProcessElementsView");
			for(TaskFigure taskFigure : view.getMediator().getView().getTaskFigures()){
				if(taskFigure.getDescription().equals(taskUseName)){
					for( int i = 0; i < taskFigure.getStdActionsPlate().getChildren().size(); i++){
						Label label = (Label) taskFigure.getStdActionsPlate().getChildren().get(i);
						if(label instanceof HyperlinkFigure){
							HyperlinkFigure hyperlinkFigure = (HyperlinkFigure) label;

							//In any cases, put on end to false
							taskFigure.setFinished(true);
							if(hyperlinkFigure.getText() == "on end"){
								hyperlinkFigure.getAction().setEnabled(false);
								taskFigure.setFinished(true);
								ModelUtils.changeStateWorkUnitIntoExecutionContextModel(executionContext, taskUseName, State.FINISHED);
							}
							Utils.setStatusFollowingTasks(taskFigure.getDescription(), view, container, processModelPath, executionContext);
							hyperlinkFigure.repaint();
						}
					}
				}
			}
		} catch (PartInitException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		//Execute the task
		ACInterpreter.finalize(taskUseName, getBehaviorModelPath(), contextModelPath);
	}
}
