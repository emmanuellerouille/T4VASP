package org.kermeta.spem.processexecution.view.actions.impl;

import org.eclipse.draw2d.Label;
import org.eclipse.draw2d.RectangleFigure;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.kermeta.spem.behavior.Container;
import org.kermeta.spem.executioncontext.ExecutionContext;
import org.kermeta.spem.executioncontext.State;
import org.kermeta.spem.processexecution.utils.model.ModelUtils;
import org.kermeta.spem.processexecution.view.HyperlinkFigure;
import org.kermeta.spem.processexecution.view.ProcessPart;
import org.kermeta.spem.processexecution.view.TaskFigure;
import org.kermeta.spem.processexecution.view.actions.ProcessAction;

public class DoneAction extends ProcessAction {

	private String processModelPath = null;

	public DoneAction(boolean enabled) {
		super(enabled);
		// TODO Auto-generated constructor stub
	}

	public DoneAction(boolean enabled, String taskUseName, String contextModelPath){
		super(enabled, taskUseName, contextModelPath);
	}

	public DoneAction(boolean enabled, String taskUseName, String contextModelPath, Boolean activityLevel, String activityName){
		super(enabled, taskUseName, contextModelPath, activityLevel, activityName);
	}

	@Override
	public void run() {

		ExecutionContext executionContext = ModelUtils.getExecutionContextRoot(contextModelPath);

		String behaviorModelPath = ModelUtils.getBehaviorModelPath(contextModelPath);
		processModelPath = ModelUtils.getProcessModelPath(contextModelPath);

		//Get the root of the behavior model
		Container container = ModelUtils.getBehaviorModelRoot(behaviorModelPath);

		//update process view
		ProcessPart view;
		try {
			view = (ProcessPart)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("ProcessExecution.views.ProcessElementsView");
			for(TaskFigure taskFigure : view.getMediator().getView().getTaskFigures()){
				if(taskFigure.getDescription().equals(taskUseName)){
					for( int i = 0; i < taskFigure.getStdActionsPlate().getChildren().size(); i++){
						Label label = (Label) taskFigure.getStdActionsPlate().getChildren().get(i);
						if(label instanceof HyperlinkFigure){
							HyperlinkFigure hyperlinkFigure = (HyperlinkFigure) label;

							if(this.isActivityLevel()){
								//If the finalization is not automated, then finish the current task figure and put the on start or on do of the following tasks to true
								if(!ModelUtils.isActivityFinalizationAutomated(taskFigure.getDescription(), container)){
									taskFigure.setFinished(true);
									ModelUtils.changeStateWorkUnitIntoExecutionContextModel(executionContext, taskUseName, State.FINISHED);
									//Set the status of the following work units
									Utils.setStatusFollowingActivities(taskFigure.getDescription(), view, container, ModelUtils.getProcessModelPath(contextModelPath), executionContext);
								}else{//the finalization is automated, put on end to true
									if(hyperlinkFigure.getText() == "on end"){
										hyperlinkFigure.getAction().setEnabled(true);
										ModelUtils.changeStateWorkUnitIntoExecutionContextModel(executionContext, taskUseName, State.ON_END);
									}
								}
							}else{
								//If the finalization is not automated, then finish the current task figure and put the on start or on do of the following tasks to true
								if(!ModelUtils.isFinalizationAutomated(taskFigure.getDescription(), container)){
									taskFigure.setFinished(true);
									ModelUtils.changeStateWorkUnitIntoExecutionContextModel(executionContext, taskUseName, State.FINISHED);
									//Set the status of the following work units
									Utils.setStatusFollowingTasks(taskFigure.getDescription(), view, container, ModelUtils.getProcessModelPath(contextModelPath), executionContext);
								}else{//the finalization is automated, put on end to true
									if(hyperlinkFigure.getText() == "on end"){
										hyperlinkFigure.getAction().setEnabled(true);
										ModelUtils.changeStateWorkUnitIntoExecutionContextModel(executionContext, taskUseName, State.ON_END);
									}
								}
							}

							//In any cases, put done to false
							if(hyperlinkFigure.getText() == "done"){
								hyperlinkFigure.getAction().setEnabled(false);
							}
							hyperlinkFigure.repaint();
						}
					}
				}
			}
		} catch (PartInitException e) {
			e.printStackTrace();
		}
	}
}
