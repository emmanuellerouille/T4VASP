package org.kermeta.spem.processexecution.view.actions.impl;

import java.util.ArrayList;
import java.util.Date;

import org.eclipse.draw2d.Label;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.kermeta.spem.activityautomationmanager.BehaviorExecution;
import org.kermeta.spem.behavior.AC;
import org.kermeta.spem.behavior.Container;
import org.kermeta.spem.executioncontext.ExecutionContext;
import org.kermeta.spem.executioncontext.State;
import org.kermeta.spem.parameterreader.ParameterReader;
import org.kermeta.spem.processexecution.acinterpreter.ACInterpreter;
import org.kermeta.spem.processexecution.utils.model.ModelUtils;
import org.kermeta.spem.processexecution.view.HyperlinkFigure;
import org.kermeta.spem.processexecution.view.ProcessPart;
import org.kermeta.spem.processexecution.view.TaskFigure;
import org.kermeta.spem.processexecution.view.actions.ProcessAction;

import spem.Activity;
import spem.uma.DeliveryProcess;

public class DoAction extends ProcessAction{

	public DoAction(boolean enabled, String taskUseName, String contextModelPath, Activity containingActivity){
		super(enabled, taskUseName, contextModelPath, containingActivity);
	}

	@Override
	public void run() {
		
		Date beginning = new Date();

		String behaviorModelPath = ModelUtils.getBehaviorModelPath(contextModelPath);

		//Get the root of the behavior model
		Container container = ModelUtils.getBehaviorModelRoot(behaviorModelPath);

		//update process view
		ProcessPart view;
		try {
			view = (ProcessPart)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("ProcessExecution.views.ProcessElementsView");
			if(isLeaf(taskUseName)){//The current work unit does not contain work units
				//Update the state of the work units
				updateWorkUnits(view, ModelUtils.getExecutionContextRoot(contextModelPath));
				//Execute the work unit
				executeWorkUnit();
			}else{//The current work unit contains work units
				//Update the state of the work units
				updateWorkUnits(view, ModelUtils.getExecutionContextRoot(contextModelPath));
				//Launch the execution of the work units contained by the current one
				ArrayList<String> taskFigureNames = ModelUtils.getTaskFiguresNames(ModelUtils.findActivity(taskUseName, contextModelPath));
				Utils.initProcessView(ModelUtils.getExecutionContextRoot(contextModelPath), taskFigureNames, container, ModelUtils.findActivity(taskUseName, contextModelPath));
			}
		} catch (PartInitException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//Get the end date now and calculate the time for this task to execute if it is automated
		if(ModelUtils.isExecutionAutomated(taskUseName)){
			Date end = new Date();
			Long time = end.getTime() - beginning.getTime(); 
			ModelUtils.addKeyValueIntoExecutionContextModel(ModelUtils.getExecutionContextRoot(contextModelPath), "time "+taskUseName+" on do", time.toString());
			
			//Compute the accumulated time
			Long accumulatedTime = Long.valueOf(ModelUtils.getValueOfKey("accumulated time", ModelUtils.getExecutionContextRoot(contextModelPath)));
			accumulatedTime += time;
			ModelUtils.setValueOfKeyIntoExecutionContextModel(ModelUtils.getExecutionContextRoot(contextModelPath), "accumulated time", accumulatedTime.toString());
		}else{//if the task is manual, then save the beginning date into the context model
			ModelUtils.addKeyValueIntoExecutionContextModel(ModelUtils.getExecutionContextRoot(contextModelPath), "begining date "+taskUseName+" on do", ((Long)beginning.getTime()).toString());
		}
	}

	public void updateWorkUnits(ProcessPart view, ExecutionContext executionContext){
		for(TaskFigure taskFigure : view.getMediator().getView().getTaskFigures()){
			if(taskFigure.getDescription().equals(taskUseName)){
				for( int i = 0; i < taskFigure.getStdActionsPlate().getChildren().size(); i++){
					Label label = (Label) taskFigure.getStdActionsPlate().getChildren().get(i);
					if(label instanceof HyperlinkFigure){
						HyperlinkFigure hyperlinkFigure = (HyperlinkFigure) label;

						if(!ModelUtils.isExecutionAutomated(taskFigure.getDescription()) && isLeaf(taskUseName)){//Put done to true if the execution is manual and if the current work unit is a leaf 
							if(hyperlinkFigure.getText() == "done"){
								hyperlinkFigure.getAction().setEnabled(true);
								ModelUtils.changeStateWorkUnitIntoExecutionContextModel(executionContext, taskUseName, State.DONE);
							}
						}else{//If the execution is automated or if the current work unit is not a leaf
							if(ModelUtils.isFinalizationAutomated(taskFigure.getDescription())){//if the finalization is automated put on end to true
								if(hyperlinkFigure.getText() == "on end"){
									hyperlinkFigure.getAction().setEnabled(true);
									ModelUtils.changeStateWorkUnitIntoExecutionContextModel(executionContext, taskUseName, State.ON_END);
								}
							}else{
								//set the status of the following tasks otherwise
								taskFigure.setFinished(true);
								ModelUtils.changeStateWorkUnitIntoExecutionContextModel(executionContext, taskUseName, State.FINISHED);
								Utils.setStatusFollowingWorkUnits(taskFigure.getDescription(), view, ModelUtils.getProcessModelPath(contextModelPath), executionContext, this.getContainingActivity());
							}
						}

						if(hyperlinkFigure.getText() == "on do"){
							hyperlinkFigure.getAction().setEnabled(false);
						}
						hyperlinkFigure.repaint();
					}
				}
			}
		}
	}

	public void executeWorkUnit(){
		//Execute the workUnit
		//If the execution is manual
		if(!ModelUtils.isExecutionAutomated(taskUseName)){
			BehaviorExecution.behaviorExecution("Wait for the user to perform manual tasks", contextModelPath);
		}else{//If the execution is automated
			//Ask for needed parameters
			AC ac = ModelUtils.findACForWorkUnit(taskUseName, ModelUtils.getBehaviorModelPath(contextModelPath), "onDo");
			ParameterReader.readParameters(ac, contextModelPath);
			//Execute the automation of the task
			ACInterpreter.execute(taskUseName, ModelUtils.getBehaviorModelPath(contextModelPath), contextModelPath);
		}
	}

	public Boolean isLeaf(String workUnitName){
		boolean res = true;
		if(getContainingActivity() instanceof DeliveryProcess){
			Activity a = ModelUtils.findActivity(workUnitName, contextModelPath);
			if(ModelUtils.containsTasks(a)){//If the activity contains tasks, then run the execution of these tasks
				return false;
			}
		}
		return res;
	}
}
