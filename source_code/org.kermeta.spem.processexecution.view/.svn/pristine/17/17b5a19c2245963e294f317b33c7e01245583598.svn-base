package org.kermeta.spem.processexecution.view.actions.impl;

import org.eclipse.draw2d.Label;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.kermeta.spem.executioncontext.State;
import org.kermeta.spem.processexecution.view.HyperlinkFigure;
import org.kermeta.spem.processexecution.view.ProcessPart;
import org.kermeta.spem.processexecution.view.actions.ProcessAction;
import my.group.org.kermeta.spem.execution.taskuserunner.MainRunner;
import src.main.kmt.KerRichFactory;
import src.main.kmt.Main;

public class DoAction extends ProcessAction{

	public DoAction(boolean enabled) {
		super(enabled);
		// TODO Auto-generated constructor stub
	}

	public DoAction(boolean enabled, String taskUseName){
		super(enabled, taskUseName);
	}

	public DoAction(boolean enabled, String taskUseName, String contextModelPath){
		super(enabled, taskUseName, contextModelPath);
	}

	@Override
	public void run() {

		//update process view
		ProcessPart view;
		try {
			view = (ProcessPart)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("ProcessExecution.views.ProcessElementsView");
			if(taskUseName.equals("Metamodel creation")){
				for( int i = 0; i < view.getMediator().getView().getAbstractSyntaxFigure().getStdActionsPlate().getChildren().size(); i++){
					Label label = (Label) view.getMediator().getView().getAbstractSyntaxFigure().getStdActionsPlate().getChildren().get(i);
					if(label instanceof HyperlinkFigure){
						HyperlinkFigure hyperlinkFigure = (HyperlinkFigure) label;
						if(hyperlinkFigure.getText() == "done"){
							hyperlinkFigure.getAction().setEnabled(true);
						}
						if(hyperlinkFigure.getText() == "on do"){
							hyperlinkFigure.getAction().setEnabled(false);
						}
						hyperlinkFigure.repaint();
					}
				}
			} else if(taskUseName.equals("Static semantics creation")){
				for( int i = 0; i < view.getMediator().getView().getStaticSemanticsFigure().getStdActionsPlate().getChildren().size(); i++){
					Label label = (Label) view.getMediator().getView().getStaticSemanticsFigure().getStdActionsPlate().getChildren().get(i);
					if(label instanceof HyperlinkFigure){
						HyperlinkFigure hyperlinkFigure = (HyperlinkFigure) label;
						if(hyperlinkFigure.getText() == "done"){
							hyperlinkFigure.getAction().setEnabled(true);
						}
						if(hyperlinkFigure.getText() == "on do"){
							hyperlinkFigure.getAction().setEnabled(false);
						}
						hyperlinkFigure.repaint();
					}
				}
			} else if(taskUseName.equals("Checker creation")){
				for( int i = 0; i < view.getMediator().getView().getCheckerFigure().getStdActionsPlate().getChildren().size(); i++){
					Label label = (Label) view.getMediator().getView().getCheckerFigure().getStdActionsPlate().getChildren().get(i);
					if(label instanceof HyperlinkFigure){
						HyperlinkFigure hyperlinkFigure = (HyperlinkFigure) label;
						if(hyperlinkFigure.getText() == "done"){
							hyperlinkFigure.getAction().setEnabled(true);
						}
						if(hyperlinkFigure.getText() == "on do"){
							hyperlinkFigure.getAction().setEnabled(false);
						}
						hyperlinkFigure.repaint();
					}
				}
			} else if(taskUseName.equals("Interpreter creation")) {
				for( int i = 0; i < view.getMediator().getView().getInterpreterFigure().getStdActionsPlate().getChildren().size(); i++){
					Label label = (Label) view.getMediator().getView().getInterpreterFigure().getStdActionsPlate().getChildren().get(i);
					if(label instanceof HyperlinkFigure){
						HyperlinkFigure hyperlinkFigure = (HyperlinkFigure) label;
						if(hyperlinkFigure.getText() == "done"){
							hyperlinkFigure.getAction().setEnabled(true);
						}
						if(hyperlinkFigure.getText() == "on do"){
							hyperlinkFigure.getAction().setEnabled(false);
						}
						hyperlinkFigure.repaint();
					}
				}
			} else if(taskUseName.equals("Tree concrete syntax creation")) {
				for( int i = 0; i < view.getMediator().getView().getTreeConcreteSyntaxFigure().getStdActionsPlate().getChildren().size(); i++){
					Label label = (Label) view.getMediator().getView().getTreeConcreteSyntaxFigure().getStdActionsPlate().getChildren().get(i);
					if(label instanceof HyperlinkFigure){
						HyperlinkFigure hyperlinkFigure = (HyperlinkFigure) label;
						if(hyperlinkFigure.getText() == "on do"){
							hyperlinkFigure.getAction().setEnabled(false);
						}
						hyperlinkFigure.repaint();
					}
				}
			} else /*taskUseName.equals("Compiler creation")*/{
				for( int i = 0; i < view.getMediator().getView().getCompilerFigure().getStdActionsPlate().getChildren().size(); i++){
					Label label = (Label) view.getMediator().getView().getCompilerFigure().getStdActionsPlate().getChildren().get(i);
					if(label instanceof HyperlinkFigure){
						HyperlinkFigure hyperlinkFigure = (HyperlinkFigure) label;
						if(hyperlinkFigure.getText() == "done"){
							hyperlinkFigure.getAction().setEnabled(true);
						}
						if(hyperlinkFigure.getText() == "on do"){
							hyperlinkFigure.getAction().setEnabled(false);
						}
						hyperlinkFigure.repaint();
					}
				}
			}
		} catch (PartInitException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		//Execute the task
		String processModelPath = getProcessModelPath();
		String behaviorModelPath = getBehaviorModelPath();

		ResourceSet rSet = new ResourceSetImpl();
		rSet.getResourceFactoryRegistry().getExtensionToFactoryMap();
		MainRunner.init4eclipse();
		rSet.getResourceFactoryRegistry().getExtensionToFactoryMap();
		MainRunner.init();
		rSet.getResourceFactoryRegistry().getExtensionToFactoryMap();
		Main m = KerRichFactory.createMain();
		m.doExecution(processModelPath, behaviorModelPath, taskUseName, contextModelPath);
	}
}
