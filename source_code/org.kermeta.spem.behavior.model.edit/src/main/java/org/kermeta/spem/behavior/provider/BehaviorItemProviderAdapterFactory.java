/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.kermeta.spem.behavior.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.kermeta.spem.behavior.util.BehaviorAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BehaviorItemProviderAdapterFactory extends BehaviorAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BehaviorItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.spem.behavior.Container} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerItemProvider containerItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.spem.behavior.Container}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerAdapter() {
		if (containerItemProvider == null) {
			containerItemProvider = new ContainerItemProvider(this);
		}

		return containerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.spem.behavior.PreCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreConditionItemProvider preConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.spem.behavior.PreCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreConditionAdapter() {
		if (preConditionItemProvider == null) {
			preConditionItemProvider = new PreConditionItemProvider(this);
		}

		return preConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.spem.behavior.PostCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PostConditionItemProvider postConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.spem.behavior.PostCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPostConditionAdapter() {
		if (postConditionItemProvider == null) {
			postConditionItemProvider = new PostConditionItemProvider(this);
		}

		return postConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.spem.behavior.KermetaAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KermetaActionItemProvider kermetaActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.spem.behavior.KermetaAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKermetaActionAdapter() {
		if (kermetaActionItemProvider == null) {
			kermetaActionItemProvider = new KermetaActionItemProvider(this);
		}

		return kermetaActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.spem.behavior.JavaEclipseAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaEclipseActionItemProvider javaEclipseActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.spem.behavior.JavaEclipseAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaEclipseActionAdapter() {
		if (javaEclipseActionItemProvider == null) {
			javaEclipseActionItemProvider = new JavaEclipseActionItemProvider(this);
		}

		return javaEclipseActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.spem.behavior.ShellAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShellActionItemProvider shellActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.spem.behavior.ShellAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShellActionAdapter() {
		if (shellActionItemProvider == null) {
			shellActionItemProvider = new ShellActionItemProvider(this);
		}

		return shellActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.spem.behavior.GroovyAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroovyActionItemProvider groovyActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.spem.behavior.GroovyAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroovyActionAdapter() {
		if (groovyActionItemProvider == null) {
			groovyActionItemProvider = new GroovyActionItemProvider(this);
		}

		return groovyActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.spem.behavior.OCLExrpession} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLExrpessionItemProvider oclExrpessionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.spem.behavior.OCLExrpession}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLExrpessionAdapter() {
		if (oclExrpessionItemProvider == null) {
			oclExrpessionItemProvider = new OCLExrpessionItemProvider(this);
		}

		return oclExrpessionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.spem.behavior.WorkUnitHandle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkUnitHandleItemProvider workUnitHandleItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.spem.behavior.WorkUnitHandle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkUnitHandleAdapter() {
		if (workUnitHandleItemProvider == null) {
			workUnitHandleItemProvider = new WorkUnitHandleItemProvider(this);
		}

		return workUnitHandleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.spem.behavior.PrimitiveAC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveACItemProvider primitiveACItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.spem.behavior.PrimitiveAC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveACAdapter() {
		if (primitiveACItemProvider == null) {
			primitiveACItemProvider = new PrimitiveACItemProvider(this);
		}

		return primitiveACItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.spem.behavior.ACL} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ACLItemProvider aclItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.spem.behavior.ACL}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createACLAdapter() {
		if (aclItemProvider == null) {
			aclItemProvider = new ACLItemProvider(this);
		}

		return aclItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (containerItemProvider != null) containerItemProvider.dispose();
		if (preConditionItemProvider != null) preConditionItemProvider.dispose();
		if (postConditionItemProvider != null) postConditionItemProvider.dispose();
		if (kermetaActionItemProvider != null) kermetaActionItemProvider.dispose();
		if (javaEclipseActionItemProvider != null) javaEclipseActionItemProvider.dispose();
		if (shellActionItemProvider != null) shellActionItemProvider.dispose();
		if (groovyActionItemProvider != null) groovyActionItemProvider.dispose();
		if (oclExrpessionItemProvider != null) oclExrpessionItemProvider.dispose();
		if (workUnitHandleItemProvider != null) workUnitHandleItemProvider.dispose();
		if (primitiveACItemProvider != null) primitiveACItemProvider.dispose();
		if (aclItemProvider != null) aclItemProvider.dispose();
	}

}
