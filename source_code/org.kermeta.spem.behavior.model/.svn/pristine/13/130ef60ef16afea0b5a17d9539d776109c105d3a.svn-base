/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.kermeta.spem.behavior.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.kermeta.spem.behavior.Action;
import org.kermeta.spem.behavior.AutomationComponentsProcess;
import org.kermeta.spem.behavior.BehaviorPackage;
import org.kermeta.spem.behavior.Condition;
import org.kermeta.spem.behavior.Container;
import org.kermeta.spem.behavior.Key;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Container</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.kermeta.spem.behavior.impl.ContainerImpl#getConditions <em>Conditions</em>}</li>
 *   <li>{@link org.kermeta.spem.behavior.impl.ContainerImpl#getActions <em>Actions</em>}</li>
 *   <li>{@link org.kermeta.spem.behavior.impl.ContainerImpl#getKeys <em>Keys</em>}</li>
 *   <li>{@link org.kermeta.spem.behavior.impl.ContainerImpl#getAutomationComponentsProcesses <em>Automation Components Processes</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ContainerImpl extends EObjectImpl implements Container {
	/**
	 * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getConditions()
	 * @generated
	 * @ordered
	 */
	protected EList<Condition> conditions;

	/**
	 * The cached value of the '{@link #getActions() <em>Actions</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getActions()
	 * @generated
	 * @ordered
	 */
	protected EList<Action> actions;

	/**
	 * The cached value of the '{@link #getKeys() <em>Keys</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getKeys()
	 * @generated
	 * @ordered
	 */
	protected EList<Key> keys;

	/**
	 * The cached value of the '{@link #getAutomationComponentsProcesses() <em>Automation Components Processes</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAutomationComponentsProcesses()
	 * @generated
	 * @ordered
	 */
	protected EList<AutomationComponentsProcess> automationComponentsProcesses;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BehaviorPackage.Literals.CONTAINER;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Condition> getConditions() {
		if (conditions == null) {
			conditions = new EObjectContainmentEList<Condition>(Condition.class, this, BehaviorPackage.CONTAINER__CONDITIONS);
		}
		return conditions;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Action> getActions() {
		if (actions == null) {
			actions = new EObjectContainmentEList<Action>(Action.class, this, BehaviorPackage.CONTAINER__ACTIONS);
		}
		return actions;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Key> getKeys() {
		if (keys == null) {
			keys = new EObjectContainmentEList<Key>(Key.class, this, BehaviorPackage.CONTAINER__KEYS);
		}
		return keys;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<AutomationComponentsProcess> getAutomationComponentsProcesses() {
		if (automationComponentsProcesses == null) {
			automationComponentsProcesses = new EObjectContainmentEList<AutomationComponentsProcess>(AutomationComponentsProcess.class, this, BehaviorPackage.CONTAINER__AUTOMATION_COMPONENTS_PROCESSES);
		}
		return automationComponentsProcesses;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BehaviorPackage.CONTAINER__CONDITIONS:
				return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
			case BehaviorPackage.CONTAINER__ACTIONS:
				return ((InternalEList<?>)getActions()).basicRemove(otherEnd, msgs);
			case BehaviorPackage.CONTAINER__KEYS:
				return ((InternalEList<?>)getKeys()).basicRemove(otherEnd, msgs);
			case BehaviorPackage.CONTAINER__AUTOMATION_COMPONENTS_PROCESSES:
				return ((InternalEList<?>)getAutomationComponentsProcesses()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BehaviorPackage.CONTAINER__CONDITIONS:
				return getConditions();
			case BehaviorPackage.CONTAINER__ACTIONS:
				return getActions();
			case BehaviorPackage.CONTAINER__KEYS:
				return getKeys();
			case BehaviorPackage.CONTAINER__AUTOMATION_COMPONENTS_PROCESSES:
				return getAutomationComponentsProcesses();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BehaviorPackage.CONTAINER__CONDITIONS:
				getConditions().clear();
				getConditions().addAll((Collection<? extends Condition>)newValue);
				return;
			case BehaviorPackage.CONTAINER__ACTIONS:
				getActions().clear();
				getActions().addAll((Collection<? extends Action>)newValue);
				return;
			case BehaviorPackage.CONTAINER__KEYS:
				getKeys().clear();
				getKeys().addAll((Collection<? extends Key>)newValue);
				return;
			case BehaviorPackage.CONTAINER__AUTOMATION_COMPONENTS_PROCESSES:
				getAutomationComponentsProcesses().clear();
				getAutomationComponentsProcesses().addAll((Collection<? extends AutomationComponentsProcess>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BehaviorPackage.CONTAINER__CONDITIONS:
				getConditions().clear();
				return;
			case BehaviorPackage.CONTAINER__ACTIONS:
				getActions().clear();
				return;
			case BehaviorPackage.CONTAINER__KEYS:
				getKeys().clear();
				return;
			case BehaviorPackage.CONTAINER__AUTOMATION_COMPONENTS_PROCESSES:
				getAutomationComponentsProcesses().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BehaviorPackage.CONTAINER__CONDITIONS:
				return conditions != null && !conditions.isEmpty();
			case BehaviorPackage.CONTAINER__ACTIONS:
				return actions != null && !actions.isEmpty();
			case BehaviorPackage.CONTAINER__KEYS:
				return keys != null && !keys.isEmpty();
			case BehaviorPackage.CONTAINER__AUTOMATION_COMPONENTS_PROCESSES:
				return automationComponentsProcesses != null && !automationComponentsProcesses.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //ContainerImpl
