/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.kermeta.spem.behavior.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.kermeta.spem.behavior.AutomationComponentsProcess;
import org.kermeta.spem.behavior.BehaviorPackage;
import org.kermeta.spem.behavior.Element;

import spem.TaskUse;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Automation Components Process</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.kermeta.spem.behavior.impl.AutomationComponentsProcessImpl#getStartedTaskUses <em>Started Task Uses</em>}</li>
 *   <li>{@link org.kermeta.spem.behavior.impl.AutomationComponentsProcessImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.kermeta.spem.behavior.impl.AutomationComponentsProcessImpl#getPerformedTaskUses <em>Performed Task Uses</em>}</li>
 *   <li>{@link org.kermeta.spem.behavior.impl.AutomationComponentsProcessImpl#getFinishedTaskUses <em>Finished Task Uses</em>}</li>
 *   <li>{@link org.kermeta.spem.behavior.impl.AutomationComponentsProcessImpl#getElements <em>Elements</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class AutomationComponentsProcessImpl extends EObjectImpl implements AutomationComponentsProcess {
	/**
	 * The cached value of the '{@link #getStartedTaskUses() <em>Started Task Uses</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getStartedTaskUses()
	 * @generated
	 * @ordered
	 */
	protected EList<TaskUse> startedTaskUses;

	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The cached value of the '{@link #getPerformedTaskUses() <em>Performed Task Uses</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPerformedTaskUses()
	 * @generated
	 * @ordered
	 */
	protected EList<TaskUse> performedTaskUses;

	/**
	 * The cached value of the '{@link #getFinishedTaskUses() <em>Finished Task Uses</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFinishedTaskUses()
	 * @generated
	 * @ordered
	 */
	protected EList<TaskUse> finishedTaskUses;

	/**
	 * The cached value of the '{@link #getElements() <em>Elements</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getElements()
	 * @generated
	 * @ordered
	 */
	protected EList<Element> elements;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AutomationComponentsProcessImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BehaviorPackage.Literals.AUTOMATION_COMPONENTS_PROCESS;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TaskUse> getStartedTaskUses() {
		if (startedTaskUses == null) {
			startedTaskUses = new EObjectResolvingEList<TaskUse>(TaskUse.class, this, BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__STARTED_TASK_USES);
		}
		return startedTaskUses;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TaskUse> getPerformedTaskUses() {
		if (performedTaskUses == null) {
			performedTaskUses = new EObjectResolvingEList<TaskUse>(TaskUse.class, this, BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__PERFORMED_TASK_USES);
		}
		return performedTaskUses;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TaskUse> getFinishedTaskUses() {
		if (finishedTaskUses == null) {
			finishedTaskUses = new EObjectResolvingEList<TaskUse>(TaskUse.class, this, BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__FINISHED_TASK_USES);
		}
		return finishedTaskUses;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Element> getElements() {
		if (elements == null) {
			elements = new EObjectContainmentEList<Element>(Element.class, this, BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__ELEMENTS);
		}
		return elements;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__ELEMENTS:
				return ((InternalEList<?>)getElements()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__STARTED_TASK_USES:
				return getStartedTaskUses();
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__NAME:
				return getName();
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__PERFORMED_TASK_USES:
				return getPerformedTaskUses();
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__FINISHED_TASK_USES:
				return getFinishedTaskUses();
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__ELEMENTS:
				return getElements();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__STARTED_TASK_USES:
				getStartedTaskUses().clear();
				getStartedTaskUses().addAll((Collection<? extends TaskUse>)newValue);
				return;
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__NAME:
				setName((String)newValue);
				return;
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__PERFORMED_TASK_USES:
				getPerformedTaskUses().clear();
				getPerformedTaskUses().addAll((Collection<? extends TaskUse>)newValue);
				return;
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__FINISHED_TASK_USES:
				getFinishedTaskUses().clear();
				getFinishedTaskUses().addAll((Collection<? extends TaskUse>)newValue);
				return;
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__ELEMENTS:
				getElements().clear();
				getElements().addAll((Collection<? extends Element>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__STARTED_TASK_USES:
				getStartedTaskUses().clear();
				return;
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__NAME:
				setName(NAME_EDEFAULT);
				return;
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__PERFORMED_TASK_USES:
				getPerformedTaskUses().clear();
				return;
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__FINISHED_TASK_USES:
				getFinishedTaskUses().clear();
				return;
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__ELEMENTS:
				getElements().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__STARTED_TASK_USES:
				return startedTaskUses != null && !startedTaskUses.isEmpty();
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__PERFORMED_TASK_USES:
				return performedTaskUses != null && !performedTaskUses.isEmpty();
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__FINISHED_TASK_USES:
				return finishedTaskUses != null && !finishedTaskUses.isEmpty();
			case BehaviorPackage.AUTOMATION_COMPONENTS_PROCESS__ELEMENTS:
				return elements != null && !elements.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(')');
		return result.toString();
	}

} //AutomationComponentsProcessImpl
