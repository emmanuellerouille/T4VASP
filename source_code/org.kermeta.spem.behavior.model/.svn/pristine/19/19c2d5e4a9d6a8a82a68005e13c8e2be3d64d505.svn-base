/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package behavior.impl;

import behavior.Behavior;
import behavior.BehaviorPackage;
import behavior.EndBehavior;
import behavior.StartBehavior;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Behavior</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link behavior.impl.BehaviorImpl#getStartBehaviors <em>Start Behaviors</em>}</li>
 *   <li>{@link behavior.impl.BehaviorImpl#getEndBehaviors <em>End Behaviors</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class BehaviorImpl extends EObjectImpl implements Behavior {
	/**
	 * The cached value of the '{@link #getStartBehaviors() <em>Start Behaviors</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getStartBehaviors()
	 * @generated
	 * @ordered
	 */
	protected EList<StartBehavior> startBehaviors;

	/**
	 * The cached value of the '{@link #getEndBehaviors() <em>End Behaviors</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getEndBehaviors()
	 * @generated
	 * @ordered
	 */
	protected EList<EndBehavior> endBehaviors;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviorImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BehaviorPackage.Literals.BEHAVIOR;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<StartBehavior> getStartBehaviors() {
		if (startBehaviors == null) {
			startBehaviors = new EObjectContainmentEList<StartBehavior>(StartBehavior.class, this, BehaviorPackage.BEHAVIOR__START_BEHAVIORS);
		}
		return startBehaviors;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<EndBehavior> getEndBehaviors() {
		if (endBehaviors == null) {
			endBehaviors = new EObjectContainmentEList<EndBehavior>(EndBehavior.class, this, BehaviorPackage.BEHAVIOR__END_BEHAVIORS);
		}
		return endBehaviors;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BehaviorPackage.BEHAVIOR__START_BEHAVIORS:
				return ((InternalEList<?>)getStartBehaviors()).basicRemove(otherEnd, msgs);
			case BehaviorPackage.BEHAVIOR__END_BEHAVIORS:
				return ((InternalEList<?>)getEndBehaviors()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BehaviorPackage.BEHAVIOR__START_BEHAVIORS:
				return getStartBehaviors();
			case BehaviorPackage.BEHAVIOR__END_BEHAVIORS:
				return getEndBehaviors();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BehaviorPackage.BEHAVIOR__START_BEHAVIORS:
				getStartBehaviors().clear();
				getStartBehaviors().addAll((Collection<? extends StartBehavior>)newValue);
				return;
			case BehaviorPackage.BEHAVIOR__END_BEHAVIORS:
				getEndBehaviors().clear();
				getEndBehaviors().addAll((Collection<? extends EndBehavior>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BehaviorPackage.BEHAVIOR__START_BEHAVIORS:
				getStartBehaviors().clear();
				return;
			case BehaviorPackage.BEHAVIOR__END_BEHAVIORS:
				getEndBehaviors().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BehaviorPackage.BEHAVIOR__START_BEHAVIORS:
				return startBehaviors != null && !startBehaviors.isEmpty();
			case BehaviorPackage.BEHAVIOR__END_BEHAVIORS:
				return endBehaviors != null && !endBehaviors.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //BehaviorImpl
