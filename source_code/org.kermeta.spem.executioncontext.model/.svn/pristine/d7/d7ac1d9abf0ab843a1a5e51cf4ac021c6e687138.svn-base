/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.kermeta.spem.executioncontext.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.kermeta.spem.executioncontext.ExecutionContext;
import org.kermeta.spem.executioncontext.ExecutioncontextPackage;
import org.kermeta.spem.executioncontext.Key;
import org.kermeta.spem.executioncontext.Value;

import spem.TaskUse;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Execution Context</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.kermeta.spem.executioncontext.impl.ExecutionContextImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.kermeta.spem.executioncontext.impl.ExecutionContextImpl#getKeys <em>Keys</em>}</li>
 *   <li>{@link org.kermeta.spem.executioncontext.impl.ExecutionContextImpl#getValues <em>Values</em>}</li>
 *   <li>{@link org.kermeta.spem.executioncontext.impl.ExecutionContextImpl#getExecutedTaskUses <em>Executed Task Uses</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ExecutionContextImpl extends EObjectImpl implements ExecutionContext {
	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The cached value of the '{@link #getKeys() <em>Keys</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getKeys()
	 * @generated
	 * @ordered
	 */
	protected EList<Key> keys;

	/**
	 * The cached value of the '{@link #getValues() <em>Values</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getValues()
	 * @generated
	 * @ordered
	 */
	protected EList<Value> values;

	/**
	 * The cached value of the '{@link #getExecutedTaskUses() <em>Executed Task Uses</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getExecutedTaskUses()
	 * @generated
	 * @ordered
	 */
	protected EList<TaskUse> executedTaskUses;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecutionContextImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return ExecutioncontextPackage.Literals.EXECUTION_CONTEXT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ExecutioncontextPackage.EXECUTION_CONTEXT__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Key> getKeys() {
		if (keys == null) {
			keys = new EObjectContainmentEList<Key>(Key.class, this, ExecutioncontextPackage.EXECUTION_CONTEXT__KEYS);
		}
		return keys;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Value> getValues() {
		if (values == null) {
			values = new EObjectContainmentEList<Value>(Value.class, this, ExecutioncontextPackage.EXECUTION_CONTEXT__VALUES);
		}
		return values;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TaskUse> getExecutedTaskUses() {
		if (executedTaskUses == null) {
			executedTaskUses = new EObjectResolvingEList<TaskUse>(TaskUse.class, this, ExecutioncontextPackage.EXECUTION_CONTEXT__EXECUTED_TASK_USES);
		}
		return executedTaskUses;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case ExecutioncontextPackage.EXECUTION_CONTEXT__KEYS:
				return ((InternalEList<?>)getKeys()).basicRemove(otherEnd, msgs);
			case ExecutioncontextPackage.EXECUTION_CONTEXT__VALUES:
				return ((InternalEList<?>)getValues()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case ExecutioncontextPackage.EXECUTION_CONTEXT__NAME:
				return getName();
			case ExecutioncontextPackage.EXECUTION_CONTEXT__KEYS:
				return getKeys();
			case ExecutioncontextPackage.EXECUTION_CONTEXT__VALUES:
				return getValues();
			case ExecutioncontextPackage.EXECUTION_CONTEXT__EXECUTED_TASK_USES:
				return getExecutedTaskUses();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case ExecutioncontextPackage.EXECUTION_CONTEXT__NAME:
				setName((String)newValue);
				return;
			case ExecutioncontextPackage.EXECUTION_CONTEXT__KEYS:
				getKeys().clear();
				getKeys().addAll((Collection<? extends Key>)newValue);
				return;
			case ExecutioncontextPackage.EXECUTION_CONTEXT__VALUES:
				getValues().clear();
				getValues().addAll((Collection<? extends Value>)newValue);
				return;
			case ExecutioncontextPackage.EXECUTION_CONTEXT__EXECUTED_TASK_USES:
				getExecutedTaskUses().clear();
				getExecutedTaskUses().addAll((Collection<? extends TaskUse>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case ExecutioncontextPackage.EXECUTION_CONTEXT__NAME:
				setName(NAME_EDEFAULT);
				return;
			case ExecutioncontextPackage.EXECUTION_CONTEXT__KEYS:
				getKeys().clear();
				return;
			case ExecutioncontextPackage.EXECUTION_CONTEXT__VALUES:
				getValues().clear();
				return;
			case ExecutioncontextPackage.EXECUTION_CONTEXT__EXECUTED_TASK_USES:
				getExecutedTaskUses().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case ExecutioncontextPackage.EXECUTION_CONTEXT__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case ExecutioncontextPackage.EXECUTION_CONTEXT__KEYS:
				return keys != null && !keys.isEmpty();
			case ExecutioncontextPackage.EXECUTION_CONTEXT__VALUES:
				return values != null && !values.isEmpty();
			case ExecutioncontextPackage.EXECUTION_CONTEXT__EXECUTED_TASK_USES:
				return executedTaskUses != null && !executedTaskUses.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(')');
		return result.toString();
	}

} //ExecutionContextImpl
