/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.kermeta.cvl.variability.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.kermeta.cvl.variability.util.VariabilityAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class VariabilityItemProviderAdapterFactory extends VariabilityAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VariabilityItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.Choice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiceItemProvider choiceItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.Choice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiceAdapter() {
		if (choiceItemProvider == null) {
			choiceItemProvider = new ChoiceItemProvider(this);
		}

		return choiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.MultiplicityInterval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiplicityIntervalItemProvider multiplicityIntervalItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.MultiplicityInterval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiplicityIntervalAdapter() {
		if (multiplicityIntervalItemProvider == null) {
			multiplicityIntervalItemProvider = new MultiplicityIntervalItemProvider(this);
		}

		return multiplicityIntervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.VSpecDerivation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VSpecDerivationItemProvider vSpecDerivationItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.VSpecDerivation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVSpecDerivationAdapter() {
		if (vSpecDerivationItemProvider == null) {
			vSpecDerivationItemProvider = new VSpecDerivationItemProvider(this);
		}

		return vSpecDerivationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.VClassifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VClassifierItemProvider vClassifierItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.VClassifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVClassifierAdapter() {
		if (vClassifierItemProvider == null) {
			vClassifierItemProvider = new VClassifierItemProvider(this);
		}

		return vClassifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.FragmentSubstitution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FragmentSubstitutionItemProvider fragmentSubstitutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.FragmentSubstitution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFragmentSubstitutionAdapter() {
		if (fragmentSubstitutionItemProvider == null) {
			fragmentSubstitutionItemProvider = new FragmentSubstitutionItemProvider(this);
		}

		return fragmentSubstitutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ChoiceVariationPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiceVariationPointItemProvider choiceVariationPointItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ChoiceVariationPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiceVariationPointAdapter() {
		if (choiceVariationPointItemProvider == null) {
			choiceVariationPointItemProvider = new ChoiceVariationPointItemProvider(this);
		}

		return choiceVariationPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.PlacementFragment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlacementFragmentItemProvider placementFragmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.PlacementFragment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlacementFragmentAdapter() {
		if (placementFragmentItemProvider == null) {
			placementFragmentItemProvider = new PlacementFragmentItemProvider(this);
		}

		return placementFragmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ReplacementFragmentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplacementFragmentTypeItemProvider replacementFragmentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ReplacementFragmentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplacementFragmentTypeAdapter() {
		if (replacementFragmentTypeItemProvider == null) {
			replacementFragmentTypeItemProvider = new ReplacementFragmentTypeItemProvider(this);
		}

		return replacementFragmentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.Variabletype} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariabletypeItemProvider variabletypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.Variabletype}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariabletypeAdapter() {
		if (variabletypeItemProvider == null) {
			variabletypeItemProvider = new VariabletypeItemProvider(this);
		}

		return variabletypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ObjectSubstitution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectSubstitutionItemProvider objectSubstitutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ObjectSubstitution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectSubstitutionAdapter() {
		if (objectSubstitutionItemProvider == null) {
			objectSubstitutionItemProvider = new ObjectSubstitutionItemProvider(this);
		}

		return objectSubstitutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ObjectHandle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectHandleItemProvider objectHandleItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ObjectHandle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectHandleAdapter() {
		if (objectHandleItemProvider == null) {
			objectHandleItemProvider = new ObjectHandleItemProvider(this);
		}

		return objectHandleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.PrimitveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitveTypeItemProvider primitveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.PrimitveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitveTypeAdapter() {
		if (primitveTypeItemProvider == null) {
			primitveTypeItemProvider = new PrimitveTypeItemProvider(this);
		}

		return primitveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ObjectType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectTypeItemProvider objectTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ObjectType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectTypeAdapter() {
		if (objectTypeItemProvider == null) {
			objectTypeItemProvider = new ObjectTypeItemProvider(this);
		}

		return objectTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.VInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VInterfaceItemProvider vInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.VInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVInterfaceAdapter() {
		if (vInterfaceItemProvider == null) {
			vInterfaceItemProvider = new VInterfaceItemProvider(this);
		}

		return vInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstraintItemProvider constraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstraintAdapter() {
		if (constraintItemProvider == null) {
			constraintItemProvider = new ConstraintItemProvider(this);
		}

		return constraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.SlotAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SlotAssignmentItemProvider slotAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.SlotAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlotAssignmentAdapter() {
		if (slotAssignmentItemProvider == null) {
			slotAssignmentItemProvider = new SlotAssignmentItemProvider(this);
		}

		return slotAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.FixedSlotValueAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FixedSlotValueAssignmentItemProvider fixedSlotValueAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.FixedSlotValueAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFixedSlotValueAssignmentAdapter() {
		if (fixedSlotValueAssignmentItemProvider == null) {
			fixedSlotValueAssignmentItemProvider = new FixedSlotValueAssignmentItemProvider(this);
		}

		return fixedSlotValueAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.FixedObjectSubstitution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FixedObjectSubstitutionItemProvider fixedObjectSubstitutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.FixedObjectSubstitution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFixedObjectSubstitutionAdapter() {
		if (fixedObjectSubstitutionItemProvider == null) {
			fixedObjectSubstitutionItemProvider = new FixedObjectSubstitutionItemProvider(this);
		}

		return fixedObjectSubstitutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ObjectExistence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectExistenceItemProvider objectExistenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ObjectExistence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectExistenceAdapter() {
		if (objectExistenceItemProvider == null) {
			objectExistenceItemProvider = new ObjectExistenceItemProvider(this);
		}

		return objectExistenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.LinkAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkAssignmentItemProvider linkAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.LinkAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAssignmentAdapter() {
		if (linkAssignmentItemProvider == null) {
			linkAssignmentItemProvider = new LinkAssignmentItemProvider(this);
		}

		return linkAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.LinkHandle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkHandleItemProvider linkHandleItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.LinkHandle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkHandleAdapter() {
		if (linkHandleItemProvider == null) {
			linkHandleItemProvider = new LinkHandleItemProvider(this);
		}

		return linkHandleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ConfigurableUnit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurableUnitItemProvider configurableUnitItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ConfigurableUnit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurableUnitAdapter() {
		if (configurableUnitItemProvider == null) {
			configurableUnitItemProvider = new ConfigurableUnitItemProvider(this);
		}

		return configurableUnitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.CompositeVariationPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeVariationPointItemProvider compositeVariationPointItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.CompositeVariationPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeVariationPointAdapter() {
		if (compositeVariationPointItemProvider == null) {
			compositeVariationPointItemProvider = new CompositeVariationPointItemProvider(this);
		}

		return compositeVariationPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.CVSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CVSpecItemProvider cvSpecItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.CVSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCVSpecAdapter() {
		if (cvSpecItemProvider == null) {
			cvSpecItemProvider = new CVSpecItemProvider(this);
		}

		return cvSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.VConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VConfigurationItemProvider vConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.VConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVConfigurationAdapter() {
		if (vConfigurationItemProvider == null) {
			vConfigurationItemProvider = new VConfigurationItemProvider(this);
		}

		return vConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.VSpec2VSpecMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VSpec2VSpecMappingItemProvider vSpec2VSpecMappingItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.VSpec2VSpecMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVSpec2VSpecMappingAdapter() {
		if (vSpec2VSpecMappingItemProvider == null) {
			vSpec2VSpecMappingItemProvider = new VSpec2VSpecMappingItemProvider(this);
		}

		return vSpec2VSpecMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.LinkExistence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkExistenceItemProvider linkExistenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.LinkExistence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkExistenceAdapter() {
		if (linkExistenceItemProvider == null) {
			linkExistenceItemProvider = new LinkExistenceItemProvider(this);
		}

		return linkExistenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.OpaqueVariationPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueVariationPointItemProvider opaqueVariationPointItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.OpaqueVariationPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueVariationPointAdapter() {
		if (opaqueVariationPointItemProvider == null) {
			opaqueVariationPointItemProvider = new OpaqueVariationPointItemProvider(this);
		}

		return opaqueVariationPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ObjectSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectSpecificationItemProvider objectSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ObjectSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectSpecificationAdapter() {
		if (objectSpecificationItemProvider == null) {
			objectSpecificationItemProvider = new ObjectSpecificationItemProvider(this);
		}

		return objectSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ReplacementFragmentSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplacementFragmentSpecificationItemProvider replacementFragmentSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ReplacementFragmentSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplacementFragmentSpecificationAdapter() {
		if (replacementFragmentSpecificationItemProvider == null) {
			replacementFragmentSpecificationItemProvider = new ReplacementFragmentSpecificationItemProvider(this);
		}

		return replacementFragmentSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.VPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VPackageItemProvider vPackageItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.VPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVPackageAdapter() {
		if (vPackageItemProvider == null) {
			vPackageItemProvider = new VPackageItemProvider(this);
		}

		return vPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ToBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToBindingItemProvider toBindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ToBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToBindingAdapter() {
		if (toBindingItemProvider == null) {
			toBindingItemProvider = new ToBindingItemProvider(this);
		}

		return toBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ToPlacement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToPlacementItemProvider toPlacementItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ToPlacement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToPlacementAdapter() {
		if (toPlacementItemProvider == null) {
			toPlacementItemProvider = new ToPlacementItemProvider(this);
		}

		return toPlacementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ToReplacement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToReplacementItemProvider toReplacementItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ToReplacement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToReplacementAdapter() {
		if (toReplacementItemProvider == null) {
			toReplacementItemProvider = new ToReplacementItemProvider(this);
		}

		return toReplacementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.FromBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FromBindingItemProvider fromBindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.FromBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFromBindingAdapter() {
		if (fromBindingItemProvider == null) {
			fromBindingItemProvider = new FromBindingItemProvider(this);
		}

		return fromBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.FromPlacement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FromPlacementItemProvider fromPlacementItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.FromPlacement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFromPlacementAdapter() {
		if (fromPlacementItemProvider == null) {
			fromPlacementItemProvider = new FromPlacementItemProvider(this);
		}

		return fromPlacementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.FromReplacement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FromReplacementItemProvider fromReplacementItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.FromReplacement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFromReplacementAdapter() {
		if (fromReplacementItemProvider == null) {
			fromReplacementItemProvider = new FromReplacementItemProvider(this);
		}

		return fromReplacementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.PropositionalExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropositionalExpItemProvider propositionalExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.PropositionalExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropositionalExpAdapter() {
		if (propositionalExpItemProvider == null) {
			propositionalExpItemProvider = new PropositionalExpItemProvider(this);
		}

		return propositionalExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.QuantifiedSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuantifiedSetItemProvider quantifiedSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.QuantifiedSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuantifiedSetAdapter() {
		if (quantifiedSetItemProvider == null) {
			quantifiedSetItemProvider = new QuantifiedSetItemProvider(this);
		}

		return quantifiedSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.SetComprehension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetComprehensionItemProvider setComprehensionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.SetComprehension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetComprehensionAdapter() {
		if (setComprehensionItemProvider == null) {
			setComprehensionItemProvider = new SetComprehensionItemProvider(this);
		}

		return setComprehensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.SetComprVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetComprVariableItemProvider setComprVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.SetComprVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetComprVariableAdapter() {
		if (setComprVariableItemProvider == null) {
			setComprVariableItemProvider = new SetComprVariableItemProvider(this);
		}

		return setComprVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.SetComprVarReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetComprVarReferenceItemProvider setComprVarReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.SetComprVarReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetComprVarReferenceAdapter() {
		if (setComprVarReferenceItemProvider == null) {
			setComprVarReferenceItemProvider = new SetComprVarReferenceItemProvider(this);
		}

		return setComprVarReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.CompareExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompareExpItemProvider compareExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.CompareExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompareExpAdapter() {
		if (compareExpItemProvider == null) {
			compareExpItemProvider = new CompareExpItemProvider(this);
		}

		return compareExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.IntegerValueSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerValueSpecItemProvider integerValueSpecItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.IntegerValueSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerValueSpecAdapter() {
		if (integerValueSpecItemProvider == null) {
			integerValueSpecItemProvider = new IntegerValueSpecItemProvider(this);
		}

		return integerValueSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.BooleanValueSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanValueSpecItemProvider booleanValueSpecItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.BooleanValueSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanValueSpecAdapter() {
		if (booleanValueSpecItemProvider == null) {
			booleanValueSpecItemProvider = new BooleanValueSpecItemProvider(this);
		}

		return booleanValueSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.FloatValueSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatValueSpecItemProvider floatValueSpecItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.FloatValueSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloatValueSpecAdapter() {
		if (floatValueSpecItemProvider == null) {
			floatValueSpecItemProvider = new FloatValueSpecItemProvider(this);
		}

		return floatValueSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.StringValueSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringValueSpecItemProvider stringValueSpecItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.StringValueSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringValueSpecAdapter() {
		if (stringValueSpecItemProvider == null) {
			stringValueSpecItemProvider = new StringValueSpecItemProvider(this);
		}

		return stringValueSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.FunctionExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionExpItemProvider functionExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.FunctionExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionExpAdapter() {
		if (functionExpItemProvider == null) {
			functionExpItemProvider = new FunctionExpItemProvider(this);
		}

		return functionExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.VSpecReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VSpecReferenceItemProvider vSpecReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.VSpecReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVSpecReferenceAdapter() {
		if (vSpecReferenceItemProvider == null) {
			vSpecReferenceItemProvider = new VSpecReferenceItemProvider(this);
		}

		return vSpecReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.VSpecToConfigMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VSpecToConfigMappingItemProvider vSpecToConfigMappingItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.VSpecToConfigMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVSpecToConfigMappingAdapter() {
		if (vSpecToConfigMappingItemProvider == null) {
			vSpecToConfigMappingItemProvider = new VSpecToConfigMappingItemProvider(this);
		}

		return vSpecToConfigMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.SlotValueExistence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SlotValueExistenceItemProvider slotValueExistenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.SlotValueExistence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlotValueExistenceAdapter() {
		if (slotValueExistenceItemProvider == null) {
			slotValueExistenceItemProvider = new SlotValueExistenceItemProvider(this);
		}

		return slotValueExistenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ParametricLinkAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParametricLinkAssignmentItemProvider parametricLinkAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ParametricLinkAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParametricLinkAssignmentAdapter() {
		if (parametricLinkAssignmentItemProvider == null) {
			parametricLinkAssignmentItemProvider = new ParametricLinkAssignmentItemProvider(this);
		}

		return parametricLinkAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ParametricObjectSubstitution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParametricObjectSubstitutionItemProvider parametricObjectSubstitutionItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ParametricObjectSubstitution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParametricObjectSubstitutionAdapter() {
		if (parametricObjectSubstitutionItemProvider == null) {
			parametricObjectSubstitutionItemProvider = new ParametricObjectSubstitutionItemProvider(this);
		}

		return parametricObjectSubstitutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ParametricSlotAssignmet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParametricSlotAssignmetItemProvider parametricSlotAssignmetItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ParametricSlotAssignmet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParametricSlotAssignmetAdapter() {
		if (parametricSlotAssignmetItemProvider == null) {
			parametricSlotAssignmetItemProvider = new ParametricSlotAssignmetItemProvider(this);
		}

		return parametricSlotAssignmetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.Expression1} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Expression1ItemProvider expression1ItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.Expression1}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpression1Adapter() {
		if (expression1ItemProvider == null) {
			expression1ItemProvider = new Expression1ItemProvider(this);
		}

		return expression1ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ChoiceDerivation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiceDerivationItemProvider choiceDerivationItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ChoiceDerivation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiceDerivationAdapter() {
		if (choiceDerivationItemProvider == null) {
			choiceDerivationItemProvider = new ChoiceDerivationItemProvider(this);
		}

		return choiceDerivationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.VariableDerivation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableDerivationItemProvider variableDerivationItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.VariableDerivation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableDerivationAdapter() {
		if (variableDerivationItemProvider == null) {
			variableDerivationItemProvider = new VariableDerivationItemProvider(this);
		}

		return variableDerivationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.CVSpecDerivation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CVSpecDerivationItemProvider cvSpecDerivationItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.CVSpecDerivation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCVSpecDerivationAdapter() {
		if (cvSpecDerivationItemProvider == null) {
			cvSpecDerivationItemProvider = new CVSpecDerivationItemProvider(this);
		}

		return cvSpecDerivationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.kermeta.cvl.variability.ConfigurableUnitUsage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurableUnitUsageItemProvider configurableUnitUsageItemProvider;

	/**
	 * This creates an adapter for a {@link org.kermeta.cvl.variability.ConfigurableUnitUsage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurableUnitUsageAdapter() {
		if (configurableUnitUsageItemProvider == null) {
			configurableUnitUsageItemProvider = new ConfigurableUnitUsageItemProvider(this);
		}

		return configurableUnitUsageItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (choiceItemProvider != null) choiceItemProvider.dispose();
		if (multiplicityIntervalItemProvider != null) multiplicityIntervalItemProvider.dispose();
		if (vSpecDerivationItemProvider != null) vSpecDerivationItemProvider.dispose();
		if (vClassifierItemProvider != null) vClassifierItemProvider.dispose();
		if (fragmentSubstitutionItemProvider != null) fragmentSubstitutionItemProvider.dispose();
		if (choiceVariationPointItemProvider != null) choiceVariationPointItemProvider.dispose();
		if (placementFragmentItemProvider != null) placementFragmentItemProvider.dispose();
		if (replacementFragmentTypeItemProvider != null) replacementFragmentTypeItemProvider.dispose();
		if (variabletypeItemProvider != null) variabletypeItemProvider.dispose();
		if (objectSubstitutionItemProvider != null) objectSubstitutionItemProvider.dispose();
		if (objectHandleItemProvider != null) objectHandleItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (primitveTypeItemProvider != null) primitveTypeItemProvider.dispose();
		if (objectTypeItemProvider != null) objectTypeItemProvider.dispose();
		if (vInterfaceItemProvider != null) vInterfaceItemProvider.dispose();
		if (constraintItemProvider != null) constraintItemProvider.dispose();
		if (slotAssignmentItemProvider != null) slotAssignmentItemProvider.dispose();
		if (fixedSlotValueAssignmentItemProvider != null) fixedSlotValueAssignmentItemProvider.dispose();
		if (fixedObjectSubstitutionItemProvider != null) fixedObjectSubstitutionItemProvider.dispose();
		if (objectExistenceItemProvider != null) objectExistenceItemProvider.dispose();
		if (linkAssignmentItemProvider != null) linkAssignmentItemProvider.dispose();
		if (linkHandleItemProvider != null) linkHandleItemProvider.dispose();
		if (configurableUnitItemProvider != null) configurableUnitItemProvider.dispose();
		if (compositeVariationPointItemProvider != null) compositeVariationPointItemProvider.dispose();
		if (cvSpecItemProvider != null) cvSpecItemProvider.dispose();
		if (vConfigurationItemProvider != null) vConfigurationItemProvider.dispose();
		if (vSpec2VSpecMappingItemProvider != null) vSpec2VSpecMappingItemProvider.dispose();
		if (linkExistenceItemProvider != null) linkExistenceItemProvider.dispose();
		if (opaqueVariationPointItemProvider != null) opaqueVariationPointItemProvider.dispose();
		if (objectSpecificationItemProvider != null) objectSpecificationItemProvider.dispose();
		if (replacementFragmentSpecificationItemProvider != null) replacementFragmentSpecificationItemProvider.dispose();
		if (vPackageItemProvider != null) vPackageItemProvider.dispose();
		if (toBindingItemProvider != null) toBindingItemProvider.dispose();
		if (toPlacementItemProvider != null) toPlacementItemProvider.dispose();
		if (toReplacementItemProvider != null) toReplacementItemProvider.dispose();
		if (fromBindingItemProvider != null) fromBindingItemProvider.dispose();
		if (fromPlacementItemProvider != null) fromPlacementItemProvider.dispose();
		if (fromReplacementItemProvider != null) fromReplacementItemProvider.dispose();
		if (propositionalExpItemProvider != null) propositionalExpItemProvider.dispose();
		if (quantifiedSetItemProvider != null) quantifiedSetItemProvider.dispose();
		if (setComprehensionItemProvider != null) setComprehensionItemProvider.dispose();
		if (setComprVariableItemProvider != null) setComprVariableItemProvider.dispose();
		if (setComprVarReferenceItemProvider != null) setComprVarReferenceItemProvider.dispose();
		if (compareExpItemProvider != null) compareExpItemProvider.dispose();
		if (integerValueSpecItemProvider != null) integerValueSpecItemProvider.dispose();
		if (booleanValueSpecItemProvider != null) booleanValueSpecItemProvider.dispose();
		if (floatValueSpecItemProvider != null) floatValueSpecItemProvider.dispose();
		if (stringValueSpecItemProvider != null) stringValueSpecItemProvider.dispose();
		if (functionExpItemProvider != null) functionExpItemProvider.dispose();
		if (vSpecReferenceItemProvider != null) vSpecReferenceItemProvider.dispose();
		if (vSpecToConfigMappingItemProvider != null) vSpecToConfigMappingItemProvider.dispose();
		if (slotValueExistenceItemProvider != null) slotValueExistenceItemProvider.dispose();
		if (parametricLinkAssignmentItemProvider != null) parametricLinkAssignmentItemProvider.dispose();
		if (parametricObjectSubstitutionItemProvider != null) parametricObjectSubstitutionItemProvider.dispose();
		if (parametricSlotAssignmetItemProvider != null) parametricSlotAssignmetItemProvider.dispose();
		if (expression1ItemProvider != null) expression1ItemProvider.dispose();
		if (choiceDerivationItemProvider != null) choiceDerivationItemProvider.dispose();
		if (variableDerivationItemProvider != null) variableDerivationItemProvider.dispose();
		if (cvSpecDerivationItemProvider != null) cvSpecDerivationItemProvider.dispose();
		if (configurableUnitUsageItemProvider != null) configurableUnitUsageItemProvider.dispose();
	}

}
