package org.kermeta.spem.activityautomation.eclipse.creatextextproject;

import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.xtext.ui.shared.SharedStateModule;
import org.eclipse.xtext.util.Modules2;
import org.kermeta.spem.activityautomation.eclipse.creatextextproject.actions.CreateXTextProjectModule;
import org.osgi.framework.BundleContext;

import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Module;

/**
 * The activator class controls the plug-in life cycle
 */
public class Activator extends AbstractUIPlugin {

	// The plug-in ID
	public static final String PLUGIN_ID = "org.kermeta.spem.activityautomation.eclipse.creatextextproject"; //$NON-NLS-1$

	// The shared instance
	private static Activator plugin;
	
	/**
	 * The constructor
	 */
	public Activator() {
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
	 */
	public void start(BundleContext context) throws Exception {
		super.start(context);
		plugin = this;
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
	 */
	public void stop(BundleContext context) throws Exception {
		plugin = null;
		super.stop(context);
	}

	/**
	 * Returns the shared instance
	 *
	 * @return the shared instance
	 */
	public static Activator getDefault() {
		return plugin;
	}

	/**
	 * Returns an image descriptor for the image file at the given
	 * plug-in relative path
	 *
	 * @param path the path
	 * @return the image descriptor
	 */
	public static ImageDescriptor getImageDescriptor(String path) {
		return imageDescriptorFromPlugin(PLUGIN_ID, path);
	}
	
	public Injector createInjector(String genModelUri) {
		try {
			Module runtimeModule = getRuntimeModule();
			Module sharedStateModule = getSharedStateModule();
			Module uiModule = getUiModule();
			CreateXTextProjectModule createXtextProjectModule = new CreateXTextProjectModule();
			createXtextProjectModule.setGenModelUri(genModelUri);
			Module mergedModule = Modules2.mixin(runtimeModule, sharedStateModule, uiModule, createXtextProjectModule);
			return Guice.createInjector(mergedModule);
		} catch (Exception e) {
			System.out.println("Failed to create injector");
			System.out.println(e.getMessage());
			throw new RuntimeException("Failed to create injector", e);
		}
	}

	protected Module getRuntimeModule() {
			return new org.eclipse.xtext.XtextRuntimeModule();
	}
	
	protected Module getUiModule() {
			return new org.eclipse.xtext.ui.XtextUiModule(this);
	}
	
	protected Module getSharedStateModule() {
		return new SharedStateModule();
	}
}
